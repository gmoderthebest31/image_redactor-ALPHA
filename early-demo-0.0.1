from PyQt5.QtWidgets import (
    QApplication, QWidget,
    QFileDialog,
    QLabel, QPushButton, QListWidget,
    QHBoxLayout, QVBoxLayout
)
import os

from PIL import Image, ImageFilter

from PyQt5.QtGui import QPixmap

from PyQt5.QtCore import Qt

app = QApplication([])
window = QWidget()
window.resize(700,500)
window.setWindowTitle('Image Editor(EARLY DEMO)')

label = QLabel('Image')
btn_folder = QPushButton('Folder')
btn_gray = QPushButton('Gray')
btn_left = QPushButton('Turn Left')
btn_right = QPushButton('Turn Right')
btn_mirror = QPushButton('Mirror(DOESENT WORK)')
btn_sharpness = QPushButton('Sharpness(DOESENT WORK)')
list_pic = QListWidget()

main_h_layout = QHBoxLayout()
v1 = QVBoxLayout()
v2 = QVBoxLayout()
h_btns_layout = QHBoxLayout()
h_btns_layout.addWidget(btn_left)
h_btns_layout.addWidget(btn_right)
h_btns_layout.addWidget(btn_sharpness)
h_btns_layout.addWidget(btn_mirror)
h_btns_layout.addWidget(btn_gray)

v1.addWidget(btn_folder)
v1.addWidget(list_pic)
v2.addWidget(label)
v2.addLayout(h_btns_layout)

main_h_layout.addLayout(v1, 20)
main_h_layout.addLayout(v2, 80)

window.setLayout(main_h_layout)
window.show()

directory = ''
class ImageProcessor():
    def __init__(self):
        self.flename = None
        self.image = None
        self.dir = None
        self.save_dir = 'images/'
    def loadImage(self, filename):
        self.filename = filename
        image_path = os.path.join(directory, filename)
        self.image = Image.open(image_path)

    def showImage(self, path):
        label.hide()
        pixmapimage = QPixmap(path)
        w, h = label.width(), label.height()
        pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
        label.setPixmap(pixmapimage)
        label.show()

    def saveImage(self):
        path = os.path.join(directory, self.save_dir)
        if not(os.path.exists(path)) or os.path.isdir(path):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)

    def do_bw(self):
        self.image = self.image.convert('L')
        self.saveImage()
        image_path = os.path.join(directory, self.save.dir, self.filename)
        self.showImage(image_path)

    def do_left(self):
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveImage()
        image_path = os.path.join(directory, self.save.dir, self.filename)
        self.showImage(image_path)

    def do_right(self):
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveImage()
        image_path = os.path.join(directory, self.save.dir, self.filename)
        self.showImage(image_path)

workdir = ImageProcessor()

def showChosenImage():
    if list_pic.currentRow() >= 0:
        filename = list_pic.currentItem().text()
        workdir.loadImage(filename)
        image_path = os.path.join(directory, workdir.filename)
        workdir.showImage(image_path)

def filter(files, extensions):
    result = []
    for filename in files:
        for ext in extensions:
            if filename.endswith(ext):
                result.append(filename)
    return result

def chooseWorkDir():
    global directory
    directory = QFileDialog.getExistingDirectory()

def showFilenamesList():
    extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp']
    chooseWorkDir()
    
    filenames = filter(os.listdir(directory), extensions)
    list_pic.clear()
    for file in filenames:
        list_pic.addItem(file)

btn_folder.clicked.connect(showFilenamesList)
list_pic.currentRowChanged.connect(showChosenImage)
btn_gray.clicked.connect(workdir.do_bw)
# btn_mirror.clicked.connect(workdir.do_mirror)
# btn_sharpness.clicked.connect(workdir.do_sharpness)
btn_left.clicked.connect(workdir.do_left)
btn_right.clicked.connect(workdir.do_right)

app.exec_()
